const { pool } = require('../config/database');

class SmartRetrySystem {
    constructor() {
        // SYST√àME SIMPLIFI√â: Basculement syst√©matique vers autre SIM en cas d'√©chec
        this.timeoutMessages = new Map(); // Gestion des timeouts
        this.processingQueue = new Set(); // Messages en cours de traitement
    }

    /**
     * G√®re l'√©chec d'un message et d√©cide de la strat√©gie de retry
     */
    async handleFailedMessage(messageId, errorCode, phoneId = null, simId = null) {
        console.log(`üîÑ Gestion √©chec message ${messageId}: ${errorCode}`);
        
        try {
            // R√©cup√©rer les informations du message
            const message = await this.getMessageById(messageId);
            if (!message) {
                console.error(`‚ùå Message ${messageId} non trouv√©`);
                return false;
            }

            // D√âSACTIVATION SYST√âMATIQUE: D√©sactiver imm√©diatement la SIM d√©faillante
            if (message.sim_id) {
                await pool.execute(
                    'UPDATE sims SET is_active = 0, is_default = 0 WHERE id = ?',
                    [message.sim_id]
                );
                console.log(`‚ùå SIM ${message.sim_id} d√©sactiv√©e suite √† l'√©chec du message ${messageId} (SYST√âMATIQUE)`);
            }

            // SYST√àME SIMPLIFI√â: Toujours essayer de basculer vers une autre SIM
            console.log(`üìã √âchec d√©tect√© - Basculement automatique vers une autre SIM`);

            // V√©rifier s'il reste des SIMs disponibles
            const hasAvailableSims = await this.hasAvailableSimsForRetry(message);
            
            if (!hasAvailableSims) {
                console.log(`‚õî Message ${messageId}: Aucune SIM alternative disponible`);
                await this.markMessageAsFinalFailure(messageId, errorCode);
                return false;
            }

            // S√©curit√© : arr√™t apr√®s 10 tentatives maximum pour √©viter les boucles infinies
            if (message.retry_count >= 10) {
                console.log(`‚õî Message ${messageId}: Arr√™t de s√©curit√© apr√®s ${message.retry_count} tentatives`);
                await this.markMessageAsFinalFailure(messageId, errorCode);
                return false;
            }

            // Incr√©menter le compteur de retry
            await this.incrementRetryCount(messageId);

            // TOUJOURS basculer vers une autre SIM en cas d'√©chec
            return await this.retryWithDifferentSim(messageId, message, { switchSim: true });

        } catch (error) {
            console.error(`‚ùå Erreur lors de la gestion d'√©chec:`, error);
            return false;
        }
    }

    /**
     * Retry avec basculement vers une autre SIM
     */
    async retryWithDifferentSim(messageId, message, strategy) {
        console.log(`üîÑ Basculement SIM pour message ${messageId} (SIM ${message.sim_id} d√©j√† d√©sactiv√©e)`);
        
        try {
            // Trouver une SIM alternative (la SIM d√©faillante est d√©j√† d√©sactiv√©e dans handleFailedMessage)
            const newSimId = await this.selectAlternativeSim(message.sim_id, message.phone_id, message);
            
            if (newSimId) {
                console.log(`‚úÖ SIM alternative trouv√©e: ${newSimId}`);
                
                // CORRECTION: Utiliser la fonction globale pour √©viter les multiples SIMs par d√©faut
                const success = await this.setGlobalDefaultSim(newSimId, 'Basculement apr√®s √©chec');
                
                if (success) {
                    // CORRECTION: Modifier le message existant au lieu de cr√©er un nouveau
                    await this.updateMessageWithNewSim(messageId, newSimId);
                    console.log(`üìù Message ${messageId} mis √† jour avec SIM ${newSimId} (pas de doublon)`);
                    
                    return true;
                } else {
                    console.error(`‚ùå √âchec de la d√©finition de la SIM ${newSimId} par d√©faut`);
                    return false;
                }
            } else {
                // Pas de SIM alternative sur ce t√©l√©phone, essayer sur un autre t√©l√©phone
                console.log(`üîÑ Tentative sur autre t√©l√©phone pour message ${messageId}`);
                return await this.retryWithDifferentPhone(messageId, message, strategy);
            }
            
        } catch (error) {
            console.error(`‚ùå Erreur lors du basculement SIM:`, error);
            return false;
        }
    }

    // FONCTION SUPPRIM√âE: retryWithDelay
    // Le syst√®me simplifi√© ne fait que basculer vers une autre SIM

    /**
     * Retry sur un t√©l√©phone diff√©rent
     */
    async retryWithDifferentPhone(messageId, message, strategy) {
        console.log(`üì± Recherche t√©l√©phone alternatif pour message ${messageId}`);
        
        try {
            const alternativePhone = await this.selectAlternativePhone(message.phone_id);
            
            if (alternativePhone) {
                console.log(`‚úÖ T√©l√©phone alternatif trouv√©: ${alternativePhone.phone_id}`);
                
                // CORRECTION: Utiliser la logique unifi√©e pour √©viter les doublons
                const success = await this.setGlobalDefaultSim(alternativePhone.best_sim_id, 'Basculement vers autre t√©l√©phone');
                
                if (success) {
                    // Modifier le message existant au lieu de cr√©er un nouveau
                    await this.updateMessageWithNewSim(messageId, alternativePhone.best_sim_id);
                    console.log(`üìù Message ${messageId} mis √† jour avec t√©l√©phone ${alternativePhone.phone_id}, SIM ${alternativePhone.best_sim_id} (pas de doublon)`);
                    
                    return true;
                } else {
                    console.error(`‚ùå √âchec de la d√©finition de la SIM ${alternativePhone.best_sim_id} par d√©faut`);
                    return false;
                }
            } else {
                console.log(`‚ùå Aucun t√©l√©phone alternatif disponible`);
                await this.markMessageAsFinalFailure(messageId, 'NO_ALTERNATIVE_DEVICE');
                return false;
            }
            
        } catch (error) {
            console.error(`‚ùå Erreur lors du changement de t√©l√©phone:`, error);
            return false;
        }
    }

    /**
     * S√©lectionne la meilleure SIM alternative
     */
    async selectAlternativeSim(currentSimId, phoneId, message = null) {
        try {
            console.log(`üîç Recherche SIM alternative (actuelle: ${currentSimId}, t√©l√©phone: ${phoneId})`);
            
            // NOUVELLE LOGIQUE: D'abord essayer les SIMs non test√©es pour ce destinataire
            if (message && message.recipient) {
                const untestedSims = await this.getUntestedActiveSims(message.recipient);
                if (untestedSims.length > 0) {
                    const selectedSim = untestedSims[0];
                    console.log(`üéØ SIM non test√©e s√©lectionn√©e: ${selectedSim.id} (${selectedSim.carrier_name} ${selectedSim.phone_number || 'N/A'})`);
                    return selectedSim.id;
                }
                console.log(`‚ö†Ô∏è Aucune SIM non test√©e disponible, utilisation logique classique`);
            }
            
            // Logique classique avec quotas d√©sactiv√©s
            const [availableSims] = await pool.query(`
                SELECT s.id, s.carrier_name, s.messages_sent_month, s.monthly_limit,
                       s.recipients_monthly, s.recipients_monthly_limit,
                       COALESCE(ss.success_rate, 95) as success_rate,
                       COALESCE(ss.avg_response_time, 5000) as avg_response_time
                FROM sims s
                LEFT JOIN sim_stats ss ON s.id = ss.sim_id
                WHERE s.phone_id = ? 
                  AND s.id != ? 
                  AND s.is_active = true
                ORDER BY 
                    ss.success_rate DESC,
                    s.messages_sent_month ASC,
                    ss.avg_response_time ASC
                LIMIT 1
            `, [phoneId, currentSimId]);

            if (availableSims.length > 0) {
                console.log(`‚úÖ SIM alternative trouv√©e sur le m√™me t√©l√©phone: ${availableSims[0].id}`);
                return availableSims[0].id;
            }

            // Si pas de SIM alternative sur le m√™me t√©l√©phone, essayer sur d'autres t√©l√©phones
            console.log(`üîÑ Recherche SIM sur d'autres t√©l√©phones...`);
            const [otherPhoneSims] = await pool.query(`
                SELECT s.id, s.carrier_name, s.phone_number, s.phone_id,
                       COALESCE(ss.success_rate, 95) as success_rate,
                       COALESCE(ss.avg_response_time, 5000) as avg_response_time
                FROM sims s
                LEFT JOIN sim_stats ss ON s.id = ss.sim_id
                JOIN phones p ON s.phone_id = p.id
                WHERE p.status = 'active'
                  AND s.id != ? 
                  AND s.is_active = true
                ORDER BY 
                    ss.success_rate DESC,
                    s.messages_sent_month ASC,
                    ss.avg_response_time ASC
                LIMIT 1
            `, [currentSimId]);

            return otherPhoneSims.length > 0 ? otherPhoneSims[0].id : null;
            
        } catch (error) {
            console.error(`‚ùå Erreur lors de la s√©lection SIM alternative:`, error);
            return null;
        }
    }

    /**
     * S√©lectionne un t√©l√©phone alternatif
     */
    async selectAlternativePhone(currentPhoneId) {
        try {
            console.log(`üîç Recherche t√©l√©phone alternatif (actuel: ${currentPhoneId})`);
            
            const [alternativePhones] = await pool.query(`
                SELECT p.id as phone_id, 
                       MIN(s.id) as best_sim_id,
                       COUNT(s.id) as sim_count,
                       AVG(COALESCE(ss.success_rate, 95)) as avg_success_rate
                FROM phones p
                INNER JOIN sims s ON p.id = s.phone_id
                LEFT JOIN sim_stats ss ON s.id = ss.sim_id
                WHERE p.id != ?
                  AND p.status = 'active'
                  AND p.last_heartbeat > DATE_SUB(NOW(), INTERVAL 5 MINUTE)
                  AND s.is_active = true
                  AND s.messages_sent_month < s.monthly_limit * 0.9
                GROUP BY p.id
                HAVING sim_count > 0
                ORDER BY avg_success_rate DESC, sim_count DESC
                LIMIT 1
            `, [currentPhoneId]);

            console.log(`üìä T√©l√©phones alternatifs trouv√©s: ${alternativePhones.length}`);
            
            if (alternativePhones.length === 0) {
                // Diagnostiquer pourquoi aucun t√©l√©phone n'est trouv√©
                const [allPhones] = await pool.query(`
                    SELECT p.id, p.status, p.last_heartbeat,
                           COUNT(s.id) as total_sims,
                           COUNT(CASE WHEN s.is_active = true THEN 1 END) as active_sims
                    FROM phones p
                    LEFT JOIN sims s ON p.id = s.phone_id
                    WHERE p.id != ?
                    GROUP BY p.id, p.status, p.last_heartbeat
                `, [currentPhoneId]);
                
                console.log(`üîç Tous les autres t√©l√©phones (${allPhones.length}):`, allPhones);
            }

            return alternativePhones.length > 0 ? alternativePhones[0] : null;
            
        } catch (error) {
            console.error(`‚ùå Erreur lors de la s√©lection t√©l√©phone alternatif:`, error);
            return null;
        }
    }

    /**
     * NOUVELLE FONCTION: Met √† jour le message existant avec une nouvelle SIM (√©vite les doublons)
     */
    async updateMessageWithNewSim(messageId, newSimId) {
        try {
            // R√©cup√©rer les informations de la nouvelle SIM
            const [simInfo] = await pool.query(
                'SELECT phone_id FROM sims WHERE id = ?',
                [newSimId]
            );
            
            if (simInfo.length === 0) {
                throw new Error(`SIM ${newSimId} non trouv√©e`);
            }
            
            // Mettre √† jour le message existant avec la nouvelle SIM
            await pool.execute(`
                UPDATE sms_history 
                SET sim_id = ?, 
                    phone_id = ?, 
                    status = 'pending', 
                    retry_count = retry_count + 1,
                    updated_at = NOW(),
                    failure_reason = NULL
                WHERE id = ?
            `, [newSimId, simInfo[0].phone_id, messageId]);
            
            console.log(`‚úÖ Message ${messageId} mis √† jour: SIM ${newSimId}, statut 'pending'`);
            return true;
            
        } catch (error) {
            console.error(`‚ùå Erreur lors de la mise √† jour du message ${messageId}:`, error);
            throw error;
        }
    }

    /**
     * ANCIENNE FONCTION: Cr√©e un nouveau message avec une SIM diff√©rente (CAUSE DES DOUBLONS)
     * Conserv√©e pour compatibilit√© avec retryWithDifferentPhone
     */
    async createNewMessageWithSim(originalMessage, newSimId) {
        try {
            const [result] = await pool.execute(`
                INSERT INTO sms_history (
                    phone_id, recipient, message, sim_id, status, 
                    retry_count, created_at, updated_at
                ) VALUES (?, ?, ?, ?, 'pending', ?, NOW(), NOW())
            `, [
                originalMessage.phone_id,
                originalMessage.recipient,
                originalMessage.message,
                newSimId,
                (originalMessage.retry_count || 0) + 1
            ]);
            
            return result.insertId;
        } catch (error) {
            console.error(`‚ùå Erreur lors de la cr√©ation du nouveau message:`, error);
            throw error;
        }
    }

    /**
     * FONCTION D√âPR√âCI√âE: Cr√©e un nouveau message avec un t√©l√©phone diff√©rent
     * 
     * ‚ö†Ô∏è CETTE FONCTION CAUSE DES DOUBLONS ET N'EST PLUS UTILIS√âE
     * 
     * Remplac√©e par la logique unifi√©e dans retryWithDifferentPhone() qui utilise
     * updateMessageWithNewSim() pour √©viter les messages en double.
     * 
     * Conserv√©e temporairement pour compatibilit√© mais ne devrait plus √™tre appel√©e.
     */
    async createNewMessageWithPhone(originalMessage, newPhoneId, newSimId) {
        console.warn(`‚ö†Ô∏è ATTENTION: createNewMessageWithPhone() est d√©pr√©ci√©e et cause des doublons`);
        console.warn(`‚ö†Ô∏è Utilisez updateMessageWithNewSim() √† la place`);
        
        try {
            // CORRECTION: S'assurer que la SIM est d√©finie comme unique par d√©faut
            const success = await this.setGlobalDefaultSim(newSimId, 'Basculement vers autre t√©l√©phone');
            
            if (!success) {
                throw new Error(`Impossible de d√©finir la SIM ${newSimId} comme par d√©faut`);
            }
            
            const [result] = await pool.execute(`
                INSERT INTO sms_history (
                    phone_id, recipient, message, sim_id, status, 
                    retry_count, created_at, updated_at
                ) VALUES (?, ?, ?, ?, 'pending', ?, NOW(), NOW())
            `, [
                newPhoneId,
                originalMessage.recipient,
                originalMessage.message,
                newSimId,
                (originalMessage.retry_count || 0) + 1
            ]);
            
            return result.insertId;
        } catch (error) {
            console.error(`‚ùå Erreur lors de la cr√©ation du nouveau message sur autre t√©l√©phone:`, error);
            throw error;
        }
    }

    /**
     * Marque un message comme √©chec final
     */
    async markMessageAsFinalFailure(messageId, reason) {
        try {
            await pool.query(`
                UPDATE sms_history 
                SET status = 'failed', 
                    failure_reason = ?,
                    updated_at = NOW()
                WHERE id = ?
            `, [reason, messageId]);
            
            console.log(`‚õî Message ${messageId} marqu√© comme √©chec final: ${reason}`);
            
        } catch (error) {
            console.error(`‚ùå Erreur lors du marquage √©chec final:`, error);
        }
    }

    // FONCTIONS SUPPRIM√âES: getRetryStrategy et getMaxRetries
    // Le syst√®me simplifi√© n'utilise plus de strat√©gies complexes

    /**
     * R√©cup√®re un message par son ID
     */
    async getMessageById(messageId) {
        try {
            const [messages] = await pool.query(`
                SELECT * FROM sms_history WHERE id = ?
            `, [messageId]);
            
            return messages.length > 0 ? messages[0] : null;
            
        } catch (error) {
            console.error(`‚ùå Erreur lors de la r√©cup√©ration du message:`, error);
            return null;
        }
    }

    /**
     * Incr√©mente le compteur de retry
     */
    async incrementRetryCount(messageId) {
        try {
            await pool.query(`
                UPDATE sms_history 
                SET retry_count = retry_count + 1,
                    updated_at = NOW()
                WHERE id = ?
            `, [messageId]);
            
        } catch (error) {
            console.error(`‚ùå Erreur lors de l'incr√©mentation retry:`, error);
        }
    }

    /**
     * Met √† jour la SIM d'un message
     */
    async updateMessageSim(messageId, newSimId) {
        try {
            await pool.query(`
                UPDATE sms_history 
                SET sim_id = ?,
                    status = 'pending',
                    updated_at = NOW()
                WHERE id = ?
            `, [newSimId, messageId]);
            
        } catch (error) {
            console.error(`‚ùå Erreur lors de la mise √† jour SIM:`, error);
        }
    }

    /**
     * Met √† jour le t√©l√©phone et la SIM d'un message
     */
    async updateMessagePhone(messageId, newPhoneId, newSimId) {
        try {
            await pool.query(`
                UPDATE sms_history 
                SET phone_id = ?,
                    sim_id = ?,
                    status = 'pending',
                    updated_at = NOW()
                WHERE id = ?
            `, [newPhoneId, newSimId, messageId]);
            
        } catch (error) {
            console.error(`‚ùå Erreur lors de la mise √† jour t√©l√©phone:`, error);
        }
    }

    /**
     * Remet un message en pending pour retry
     */
    async retryMessage(messageId) {
        try {
            await pool.query(`
                UPDATE sms_history 
                SET status = 'pending',
                    updated_at = NOW()
                WHERE id = ?
            `, [messageId]);
            
            console.log(`üîÑ Message ${messageId} remis en pending pour retry`);
            
        } catch (error) {
            console.error(`‚ùå Erreur lors du retry message:`, error);
        }
    }

    /**
     * D√©marre le syst√®me de monitoring des timeouts
     */
    startTimeoutMonitoring() {
        console.log(`üïê D√©marrage du monitoring des timeouts (v√©rification toutes les 2 minutes)`);
        console.log(`üîç Surveillance des SIMs d√©faillantes (v√©rification toutes les 2 minutes - R√âACTIVIT√â AM√âLIOR√âE)`);
        
        // V√©rification des timeouts toutes les 2 minutes (optimis√©)
        setInterval(() => {
            this.checkTimeoutMessages();
        }, 120000); // 2 minutes
        
        // Surveillance des messages 'failed' toutes les 2 minutes (r√©activit√© am√©lior√©e)
        setInterval(() => {
            this.checkFailedMessagesForSimDeactivation();
        }, 120000); // 2 minutes
        
        // V√©rification des SIMs par d√©faut multiples toutes les heures (maintenance)
        setInterval(() => {
            this.checkAndFixMultipleDefaults();
        }, 3600000); // 1 heure
    }

    /**
     * V√©rifie les messages en timeout
     */
    async checkTimeoutMessages() {
        try {
            // CORRECTION: Traiter TOUS les messages en pending depuis plus d'1 minute
            // Sans limite de retry_count pour capturer les messages de retry
            const [timeoutMessages] = await pool.query(`
                SELECT id, phone_id, sim_id, recipient, retry_count, created_at
                FROM sms_history 
                WHERE status = 'pending' 
                AND created_at < DATE_SUB(NOW(), INTERVAL 1 MINUTE)
                ORDER BY created_at ASC
            `);

            console.log(`üïê V√©rification timeout: ${timeoutMessages.length} messages en attente d√©tect√©s`);

            for (const message of timeoutMessages) {
                console.log(`‚è∞ Timeout d√©tect√© pour message ${message.id} (retry_count: ${message.retry_count}, cr√©√©: ${message.created_at})`);
                
                // Traiter le timeout - cela va d√©sactiver la SIM et cr√©er un nouveau message si possible
                await this.handleFailedMessage(message.id, 'TIMEOUT', message.phone_id, message.sim_id);
            }
            
        } catch (error) {
            console.error(`‚ùå Erreur lors de la v√©rification des timeouts:`, error);
        }
    }

    /**
     * V√©rifie les messages 'failed' r√©cents et d√©sactive les SIMs correspondantes
     * Cette fonction traite les cas o√π l'app Android marque directement les messages comme 'failed'
     * sans passer par l'API qui d√©clenche handleFailedMessage
     * 
     * OPTIMIS√â: S'ex√©cute toutes les 2 minutes pour une r√©activit√© am√©lior√©e
     */
    async checkFailedMessagesForSimDeactivation() {
        try {
            console.log(`üîç Surveillance p√©riodique des SIMs d√©faillantes (toutes les 2 min)...`);
            
            // Chercher les messages 'failed' r√©cents (derni√®res 15 minutes) avec des SIMs encore actives
            // Fen√™tre √©largie √† 15 minutes pour compenser la v√©rification moins fr√©quente
            const [failedMessages] = await pool.query(`
                SELECT DISTINCT h.sim_id, 
                       MAX(h.id) as latest_message_id,
                       MAX(h.created_at) as latest_failure,
                       s.phone_number, 
                       s.carrier_name,
                       COUNT(h.id) as failure_count
                FROM sms_history h
                JOIN sims s ON h.sim_id = s.id
                WHERE h.status = 'failed' 
                AND h.created_at > DATE_SUB(NOW(), INTERVAL 15 MINUTE)
                AND s.is_active = 1
                GROUP BY h.sim_id, s.phone_number, s.carrier_name
                ORDER BY latest_failure DESC
            `);

            if (failedMessages.length > 0) {
                console.log(`üîç ${failedMessages.length} SIMs actives avec √©checs r√©cents d√©tect√©es`);
                
                for (const sim of failedMessages) {
                    console.log(`‚ùå D√©sactivation SIM ${sim.sim_id} (${sim.phone_number}) - ${sim.failure_count} √©chec(s) r√©cent(s)`);
                    
                    // D√©sactiver imm√©diatement la SIM
                    await pool.execute(
                        'UPDATE sims SET is_active = 0, is_default = 0 WHERE id = ?',
                        [sim.sim_id]
                    );
                    
                    console.log(`‚úÖ SIM ${sim.sim_id} d√©sactiv√©e automatiquement (dernier √©chec: ${sim.latest_failure})`);
                }
            } else {
                console.log(`‚úÖ Aucune SIM d√©faillante d√©tect√©e lors de cette v√©rification`);
            }
            
        } catch (error) {
            console.error(`‚ùå Erreur lors de la v√©rification des messages √©chou√©s:`, error);
        }
    }

    // FONCTION SUPPRIM√âE: checkAndDeactivateFailingSim
    // Le syst√®me de seuils a √©t√© d√©sactiv√© - d√©sormais d√©sactivation syst√©matique √† chaque √©chec

    /**
     * FONCTION GLOBALE: D√©finit une SIM comme par d√©faut et s'assure qu'aucune autre ne l'est
     * Cette fonction garantit qu'il n'y a jamais plus d'une SIM par d√©faut dans tout le syst√®me
     */
    async setGlobalDefaultSim(simId, reason = 'Basculement automatique') {
        try {
            console.log(`üîÑ D√©finition SIM ${simId} comme unique SIM par d√©faut (${reason})`);
            
            // √âTAPE 1: D√©sactiver TOUTES les SIMs par d√©faut dans le syst√®me
            const [resetResult] = await pool.execute(
                'UPDATE sims SET is_default = 0 WHERE is_default = 1'
            );
            
            if (resetResult.affectedRows > 0) {
                console.log(`üìù ${resetResult.affectedRows} SIM(s) par d√©faut pr√©c√©dente(s) d√©sactiv√©e(s)`);
            }
            
            // √âTAPE 2: D√©finir la nouvelle SIM comme par d√©faut ET active
            await pool.execute(
                'UPDATE sims SET is_active = 1, is_default = 1 WHERE id = ?',
                [simId]
            );
            
            // √âTAPE 3: V√©rifier qu'une seule SIM est par d√©faut
            const [verification] = await pool.query(
                'SELECT COUNT(*) as default_count FROM sims WHERE is_default = 1'
            );
            
            if (verification[0].default_count === 1) {
                console.log(`‚úÖ SIM ${simId} est maintenant l'unique SIM par d√©faut`);
                return true;
            } else {
                console.error(`‚ùå ERREUR: ${verification[0].default_count} SIMs par d√©faut d√©tect√©es apr√®s mise √† jour`);
                return false;
            }
            
        } catch (error) {
            console.error(`‚ùå Erreur lors de la d√©finition de la SIM par d√©faut:`, error);
            return false;
        }
    }

    /**
     * V√©rifie et corrige les SIMs par d√©faut multiples
     * Fonction utilitaire pour diagnostiquer et corriger les probl√®mes existants
     */
    async checkAndFixMultipleDefaults() {
        try {
            const [defaultSims] = await pool.query(`
                SELECT id, phone_number, carrier_name, phone_id 
                FROM sims 
                WHERE is_default = 1 
                ORDER BY id ASC
            `);
            
            if (defaultSims.length > 1) {
                console.log(`‚ö†Ô∏è PROBL√àME: ${defaultSims.length} SIMs par d√©faut d√©tect√©es`);
                
                // Garder seulement la premi√®re SIM par d√©faut (la plus ancienne)
                const keepSim = defaultSims[0];
                const removeSims = defaultSims.slice(1);
                
                console.log(`‚úÖ Conservation SIM ${keepSim.id} (${keepSim.phone_number}) comme unique par d√©faut`);
                
                for (const sim of removeSims) {
                    await pool.execute(
                        'UPDATE sims SET is_default = 0 WHERE id = ?',
                        [sim.id]
                    );
                    console.log(`üìù SIM ${sim.id} (${sim.phone_number}) retir√©e du statut par d√©faut`);
                }
                
                return true;
            } else if (defaultSims.length === 1) {
                console.log(`‚úÖ Une seule SIM par d√©faut d√©tect√©e: ${defaultSims[0].id} (${defaultSims[0].phone_number})`);
                return true;
            } else {
                console.log(`‚ö†Ô∏è Aucune SIM par d√©faut d√©tect√©e`);
                return false;
            }
            
        } catch (error) {
            console.error(`‚ùå Erreur lors de la v√©rification des SIMs par d√©faut:`, error);
            return false;
        }
    }

    // FONCTIONS SUPPRIM√âES: activateAlternativeDefaultSim et logSimDeactivation
    // Ces fonctions √©taient li√©es au syst√®me de seuils qui a √©t√© d√©sactiv√©

    /**
     * V√©rifie s'il reste des SIMs disponibles pour retry
     */
    async hasAvailableSimsForRetry(message) {
        try {
            // Compter toutes les SIMs actives disponibles
            const [allActiveSims] = await pool.query(`
                SELECT COUNT(*) as total_active_sims
                FROM sims s
                JOIN phones p ON s.phone_id = p.id
                WHERE s.is_active = 1 AND p.status = 'active'
            `);

            // Compter les SIMs qui ont d√©j√† √©t√© test√©es pour ce message r√©cemment
            const [testedSims] = await pool.query(`
                SELECT COUNT(DISTINCT sim_id) as tested_sims
                FROM sms_history
                WHERE recipient = ? 
                AND created_at > DATE_SUB(NOW(), INTERVAL 1 HOUR)
                AND status IN ('failed', 'pending')
            `, [message.recipient]);

            const totalActive = allActiveSims[0]?.total_active_sims || 0;
            const alreadyTested = testedSims[0]?.tested_sims || 0;
            const available = totalActive - alreadyTested;

            console.log(`üìä SIMs pour ${message.recipient}: ${totalActive} actives, ${alreadyTested} test√©es, ${available} disponibles`);

            return available > 0;

        } catch (error) {
            console.error(`‚ùå Erreur lors de la v√©rification des SIMs disponibles:`, error);
            return false; // En cas d'erreur, continuer par s√©curit√©
        }
    }

    /**
     * Obtient toutes les SIMs actives non test√©es pour un destinataire
     */
    async getUntestedActiveSims(recipient) {
        try {
            const [untestedSims] = await pool.query(`
                SELECT s.id, s.carrier_name, s.phone_number, s.phone_id
                FROM sims s
                JOIN phones p ON s.phone_id = p.id
                WHERE s.is_active = 1 
                AND p.status = 'active'
                AND s.id NOT IN (
                    SELECT DISTINCT sim_id 
                    FROM sms_history 
                    WHERE recipient = ? 
                    AND created_at > DATE_SUB(NOW(), INTERVAL 1 HOUR)
                    AND status IN ('failed', 'pending')
                    AND sim_id IS NOT NULL
                )
                ORDER BY RAND()
            `, [recipient]);

            console.log(`üîç ${untestedSims.length} SIMs non test√©es trouv√©es pour ${recipient}`);
            return untestedSims;

        } catch (error) {
            console.error(`‚ùå Erreur lors de la r√©cup√©ration des SIMs non test√©es:`, error);
            return [];
        }
    }
}

module.exports = SmartRetrySystem;
























