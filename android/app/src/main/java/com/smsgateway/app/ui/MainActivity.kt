package com.smsgateway.app.ui

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Bundle
import android.widget.*
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.lifecycle.lifecycleScope
import android.content.Context
import android.util.Log
import com.smsgateway.app.R
import com.smsgateway.app.data.api.ApiClient
import com.smsgateway.app.data.model.PhoneRegistration
import com.smsgateway.app.data.model.SimInfo
import com.smsgateway.app.data.model.SimSyncRequest
import com.smsgateway.app.utils.PreferencesManager
import com.smsgateway.app.utils.SimUtils
import com.smsgateway.app.service.MessageManager
import kotlinx.coroutines.launch

class MainActivity : AppCompatActivity() {
    
    private lateinit var preferencesManager: PreferencesManager
    private lateinit var messageManager: MessageManager
    private lateinit var tvStatus: TextView
    private lateinit var tvPhoneInfo: TextView
    private lateinit var tvSimsInfo: TextView
    private lateinit var tvServerInfo: TextView
    private lateinit var btnRefresh: Button
    private lateinit var btnSettings: Button
    private lateinit var btnManageSims: Button
    private lateinit var btnSyncSims: Button
    private lateinit var btnConfigureService: Button
    private lateinit var btnToggleService: Button
    private lateinit var tvServiceStatus: TextView
    private lateinit var tvConnectionStatus: TextView
    
    private val PERMISSIONS_REQUEST_CODE = 1001
    private val requiredPermissions = arrayOf(
        Manifest.permission.SEND_SMS,
        Manifest.permission.RECEIVE_SMS,
        Manifest.permission.READ_SMS,
        Manifest.permission.READ_PHONE_STATE,
        Manifest.permission.READ_PHONE_NUMBERS
    )
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main_simple)
        
        preferencesManager = PreferencesManager(this)
        messageManager = MessageManager(this, lifecycleScope)
        initViews()
        setupClickListeners()
        
        if (checkPermissions()) {
            initializeApp()
        } else {
            requestPermissions()
        }
    }
    
    private fun initViews() {
        tvStatus = findViewById(R.id.tvStatus)
        tvPhoneInfo = findViewById(R.id.tvPhoneInfo)
        tvSimsInfo = findViewById(R.id.tvSimsInfo)
        tvServerInfo = findViewById(R.id.tvServerInfo)
        tvServiceStatus = findViewById(R.id.tvServiceStatus)
        tvConnectionStatus = findViewById(R.id.tvConnectionStatus)
        btnRefresh = findViewById(R.id.btnRefresh)
        btnSettings = findViewById(R.id.btnSettings)
        btnManageSims = findViewById(R.id.btnManageSims)
        btnSyncSims = findViewById(R.id.btnSyncSims)
        btnConfigureService = findViewById(R.id.btnConfigureService)
        btnToggleService = findViewById(R.id.btnToggleService)
    }
    
    private fun setupClickListeners() {
        // Bouton de rafra√Æchissement
        btnRefresh.setOnClickListener {
            refreshData()
        }
        
        // Bouton de gestion des SIM
        btnManageSims.setOnClickListener {
            startActivity(Intent(this, SimManagementActivity::class.java))
        }
        
        // Bouton de configuration
        btnSettings.setOnClickListener {
            startActivity(Intent(this, SettingsActivity::class.java))
        }
        
        // Bouton de synchronisation des SIM
        btnSyncSims.setOnClickListener {
            syncSimsWithServer()
        }
        
        // Bouton de configuration du service
        btnConfigureService.setOnClickListener {
            showServerConfigDialog()
        }
        
        // Bouton de d√©marrage/arr√™t du service
        btnToggleService.setOnClickListener {
            toggleService()
        }
    }
    
    private fun checkPermissions(): Boolean {
        return requiredPermissions.all { permission ->
            ContextCompat.checkSelfPermission(this, permission) == PackageManager.PERMISSION_GRANTED
        }
    }
    
    private fun requestPermissions() {
        ActivityCompat.requestPermissions(this, requiredPermissions, PERMISSIONS_REQUEST_CODE)
    }
    
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        
        if (requestCode == PERMISSIONS_REQUEST_CODE) {
            if (grantResults.all { it == PackageManager.PERMISSION_GRANTED }) {
                initializeApp()
            } else {
                tvStatus.text = "‚ùå Permissions requises non accord√©es"
                Toast.makeText(this, "Toutes les permissions sont n√©cessaires", Toast.LENGTH_LONG).show()
            }
        }
    }
    
    private fun initializeApp() {
        tvStatus.text = "üîÑ Initialisation..."
        
        // Initialiser l'URL du serveur
        val serverUrl = preferencesManager.getCurrentServerUrl()
        ApiClient.updateBaseUrl(serverUrl)
        
        // Afficher les informations du serveur
        updateServerInfo()
        
        refreshData()
    }
    
    private fun refreshData() {
        tvStatus.text = "üîÑ Actualisation des donn√©es..."
        
        // D√©tecter les SIM
        val simCards = SimUtils.getAvailableSimCards(this)
        updateSimInfo(simCards)
        
        // Enregistrer le t√©l√©phone si n√©cessaire
        registerPhoneIfNeeded(simCards)
    }
    
    private fun updateSimInfo(simCards: List<SimInfo>) {
        val simCount = simCards.size
        val activeSimCount = simCards.count { it.isActive }
        
        tvSimsInfo.text = "üì± SIM d√©tect√©es: $simCount (${activeSimCount} actives)"
        
        if (simCards.isNotEmpty()) {
            val simDetails = simCards.mapIndexed { index, sim ->
                "SIM ${index + 1}: ${sim.carrierName ?: "Inconnu"} - ${if (sim.isActive) "Active" else "Inactive"}"
            }.joinToString("\n")
            
            tvPhoneInfo.text = "üìã D√©tails des SIM:\n$simDetails"
        } else {
            tvPhoneInfo.text = "‚ö†Ô∏è Aucune SIM d√©tect√©e"
        }
    }
    
    private fun registerPhoneIfNeeded(simCards: List<SimInfo>) {
        val phoneId = preferencesManager.getPhoneId()
        
        if (phoneId.isNullOrEmpty()) {
            registerPhone(simCards)
        } else {
            // V√©rifier si le t√©l√©phone existe vraiment sur le serveur
            verifyPhoneRegistration(phoneId, simCards)
        }
    }
    
    private fun verifyPhoneRegistration(phoneId: String, simCards: List<SimInfo>) {
        lifecycleScope.launch {
            try {
                tvStatus.text = "üîÑ V√©rification de l'enregistrement..."
                
                // V√©rifier si le t√©l√©phone existe sur le serveur
                val response = ApiClient.getApiService()?.getPhones()
                if (response?.isSuccessful == true) {
                    val responseBody = response.body()
                    val phones = responseBody?.data as? List<*>
                    val phoneExists = phones?.any { phone ->
                        (phone as? Map<*, *>)?.get("id")?.toString() == phoneId
                    } ?: false
                    
                    if (phoneExists) {
                        tvStatus.text = "‚úÖ T√©l√©phone enregistr√© (ID: ${phoneId.take(8)}...)"
                    } else {
                        // Le t√©l√©phone n'existe plus sur le serveur, le r√©enregistrer
                        preferencesManager.setPhoneId("")
                        registerPhone(simCards)
                    }
                } else {
                    // Erreur de connexion, r√©essayer l'enregistrement
                    registerPhone(simCards)
                }
                
            } catch (e: Exception) {
                // En cas d'erreur, r√©essayer l'enregistrement
                registerPhone(simCards)
            }
        }
    }
    
    private fun registerPhone(simCards: List<SimInfo>) {
        lifecycleScope.launch {
            try {
                tvStatus.text = "üîÑ Enregistrement du t√©l√©phone..."
                
                val phoneData = PhoneRegistration(
                    telId = android.os.Build.MODEL,
                    model = android.os.Build.MODEL,
                    androidVersion = android.os.Build.VERSION.RELEASE,
                    appVersion = "1.0.0"
                )
                
                val response = ApiClient.getApiService()?.registerPhone(phoneData)
                if (response?.isSuccessful == true) {
                    val responseBody = response.body()
                    val phoneDataResponse = responseBody?.data as? Map<*, *>
                    val newPhoneId = phoneDataResponse?.get("phone_id")?.toString()
                    
                    if (!newPhoneId.isNullOrEmpty()) {
                        preferencesManager.setPhoneId(newPhoneId)
                        tvStatus.text = "‚úÖ T√©l√©phone enregistr√© avec succ√®s"
                        Toast.makeText(this@MainActivity, "T√©l√©phone enregistr√© avec succ√®s", Toast.LENGTH_SHORT).show()
                    } else {
                        throw Exception("ID t√©l√©phone non re√ßu")
                    }
                } else {
                    throw Exception("Erreur lors de l'enregistrement: ${response?.message()}")
                }
                
            } catch (e: Exception) {
                tvStatus.text = "‚ùå Erreur d'enregistrement: ${e.message}"
                Toast.makeText(this@MainActivity, "Erreur: ${e.message}", Toast.LENGTH_LONG).show()
            }
        }
    }
    
    private fun syncSimsWithServer() {
        val phoneId = preferencesManager.getPhoneId()
        
        if (phoneId.isNullOrEmpty()) {
            Toast.makeText(this, "‚ùå T√©l√©phone non enregistr√©. Veuillez d'abord actualiser.", Toast.LENGTH_LONG).show()
            return
        }
        
        // V√©rifier les permissions critiques pour la d√©tection SIM
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_NUMBERS) != PackageManager.PERMISSION_GRANTED) {
            AlertDialog.Builder(this)
                .setTitle("‚ö†Ô∏è Permission Manquante")
                .setMessage("La permission READ_PHONE_NUMBERS est requise pour d√©tecter les cartes SIM sur Android 10+.\n\nVeuillez accorder cette permission dans les Param√®tres de l'application.")
                .setPositiveButton("Param√®tres") { _, _ ->
                    // Rediriger vers les param√®tres de l'application
                    val intent = android.content.Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS)
                    intent.data = android.net.Uri.parse("package:$packageName")
                    startActivity(intent)
                }
                .setNegativeButton("Annuler", null)
                .show()
            return
        }
        
        lifecycleScope.launch {
            try {
                tvStatus.text = "üîÑ Synchronisation des SIM en cours..."
                btnSyncSims.isEnabled = false
                
                // D√©tecter les SIM actuelles
                val simCards = SimUtils.getAvailableSimCards(this@MainActivity)
                
                if (simCards.isEmpty()) {
                    tvStatus.text = "‚ö†Ô∏è Aucune SIM d√©tect√©e pour la synchronisation"
                    
                    // Message d'aide d√©taill√©
                    AlertDialog.Builder(this@MainActivity)
                        .setTitle("üîç Aucune SIM D√©tect√©e")
                        .setMessage("Causes possibles :\n\n" +
                               "‚Ä¢ Permissions manquantes (READ_PHONE_NUMBERS)\n" +
                               "‚Ä¢ Cartes SIM non actives\n" +
                               "‚Ä¢ Probl√®me syst√®me Android\n\n" +
                               "V√©rifiez que :\n" +
                               "‚Ä¢ Les SIM sont bien ins√©r√©es\n" +
                               "‚Ä¢ L'application a toutes les permissions\n" +
                               "‚Ä¢ Le t√©l√©phone d√©tecte les SIM dans les Param√®tres")
                        .setPositiveButton("OK", null)
                        .show()
                    return@launch
                }
                
                // Pr√©parer la requ√™te de synchronisation
                val syncRequest = SimSyncRequest(
                    phoneId = phoneId,
                    sims = simCards
                )
                
                // Envoyer la requ√™te au serveur
                val response = ApiClient.getApiService()?.syncSims(syncRequest)
                
                if (response?.isSuccessful == true) {
                    val responseBody = response.body()
                    if (responseBody?.success == true) {
                        val syncData = responseBody.data
                        val syncedCount = syncData?.syncedCount ?: 0
                        
                        tvStatus.text = "‚úÖ ${syncedCount} SIM(s) synchronis√©e(s) avec succ√®s"
                        Toast.makeText(this@MainActivity, "‚úÖ ${syncedCount} SIM(s) synchronis√©e(s)", Toast.LENGTH_SHORT).show()
                        
                        // Actualiser l'affichage
                        refreshData()
                    } else {
                        throw Exception(responseBody?.message ?: "Erreur de synchronisation")
                    }
                } else {
                    val errorCode = response?.code()
                    if (errorCode == 404) {
                        throw Exception("T√©l√©phone non trouv√© sur le serveur. Veuillez d'abord actualiser.")
                    } else {
                        throw Exception("Erreur serveur ($errorCode): ${response?.message()}")
                    }
                }
                
            } catch (e: Exception) {
                tvStatus.text = "‚ùå Erreur de synchronisation: ${e.message}"
                Toast.makeText(this@MainActivity, "Erreur: ${e.message}", Toast.LENGTH_LONG).show()
            } finally {
                btnSyncSims.isEnabled = true
            }
        }
    }
    
    private fun updateServerInfo() {
        val serverType = preferencesManager.getServerType() ?: "local"
        val serverUrl = preferencesManager.getCurrentServerUrl()
        
        val icon = if (serverType == "cloud") "‚òÅÔ∏è" else "üè†"
        val typeText = if (serverType == "cloud") "Serveur Cloud" else "Serveur Local"
        val urlDisplay = serverUrl.replace("http://", "").replace("https://", "")
        
        tvServerInfo.text = "$icon $typeText: $urlDisplay"
    }
    
    private fun showServerConfigDialog() {
        // Cr√©er le layout du modal
        val layout = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            setPadding(48, 32, 48, 32)
        }
        
        // Titre
        val title = TextView(this).apply {
            text = "‚öôÔ∏è Configuration du Serveur"
            textSize = 20f
            setTextColor(0xFF00d4ff.toInt())
            gravity = android.view.Gravity.CENTER
            setPadding(0, 0, 0, 24)
        }
        layout.addView(title)
        
        // Type de serveur
        val serverTypeLabel = TextView(this).apply {
            text = "Type de serveur :"
            textSize = 16f
            setTextColor(0xFF333333.toInt())
            setPadding(0, 0, 0, 8)
        }
        layout.addView(serverTypeLabel)
        
        val radioGroup = RadioGroup(this)
        val rbLocal = RadioButton(this).apply {
            text = "üè† Serveur Local"
            id = 1
        }
        val rbCloud = RadioButton(this).apply {
            text = "‚òÅÔ∏è Serveur Cloud"
            id = 2
        }
        radioGroup.addView(rbLocal)
        radioGroup.addView(rbCloud)
        layout.addView(radioGroup)
        
        // Champ IP locale
        val localIpLabel = TextView(this).apply {
            text = "IP du serveur local :"
            textSize = 16f
            setTextColor(0xFF333333.toInt())
            setPadding(0, 16, 0, 8)
        }
        layout.addView(localIpLabel)
        
        val etLocalIp = EditText(this).apply {
            hint = "192.168.1.155:3001"
            setText(preferencesManager.getLocalServerIp() ?: "192.168.1.155:3001")
        }
        layout.addView(etLocalIp)
        
        // Champ URL cloud
        val cloudUrlLabel = TextView(this).apply {
            text = "URL du serveur cloud :"
            textSize = 16f
            setTextColor(0xFF333333.toInt())
            setPadding(0, 16, 0, 8)
        }
        layout.addView(cloudUrlLabel)
        
        val etCloudUrl = EditText(this).apply {
            hint = "https://votre-serveur.com:3001"
            setText(preferencesManager.getCloudServerUrl() ?: "")
        }
        layout.addView(etCloudUrl)
        
        // Charger les valeurs actuelles
        val currentServerType = preferencesManager.getServerType() ?: "local"
        if (currentServerType == "cloud") {
            rbCloud.isChecked = true
        } else {
            rbLocal.isChecked = true
        }
        
        // G√©rer la visibilit√© des champs
        fun updateFieldsVisibility() {
            etLocalIp.isEnabled = rbLocal.isChecked
            etCloudUrl.isEnabled = rbCloud.isChecked
            etLocalIp.alpha = if (rbLocal.isChecked) 1.0f else 0.5f
            etCloudUrl.alpha = if (rbCloud.isChecked) 1.0f else 0.5f
        }
        
        radioGroup.setOnCheckedChangeListener { _, _ ->
            updateFieldsVisibility()
        }
        
        updateFieldsVisibility()
        
        // Cr√©er et afficher le dialog
        AlertDialog.Builder(this)
            .setView(layout)
            .setPositiveButton("üíæ Sauvegarder") { _, _ ->
                val serverType = if (rbLocal.isChecked) "local" else "cloud"
                val localIp = etLocalIp.text.toString().trim()
                val cloudUrl = etCloudUrl.text.toString().trim()
                
                // Validation
                if (serverType == "local" && localIp.isEmpty()) {
                    Toast.makeText(this, "Veuillez saisir l'IP du serveur local", Toast.LENGTH_SHORT).show()
                    return@setPositiveButton
                }
                
                if (serverType == "cloud" && cloudUrl.isEmpty()) {
                    Toast.makeText(this, "Veuillez saisir l'URL du serveur cloud", Toast.LENGTH_SHORT).show()
                    return@setPositiveButton
                }
                
                // Sauvegarder les pr√©f√©rences
                preferencesManager.setServerType(serverType)
                preferencesManager.setLocalServerIp(localIp)
                preferencesManager.setCloudServerUrl(cloudUrl)
                
                // Mettre √† jour l'URL de l'API
                val newUrl = preferencesManager.getCurrentServerUrl()
                ApiClient.updateBaseUrl(newUrl)
                
                // Mettre √† jour l'affichage
                updateServerInfo()
                
                Toast.makeText(this, "‚úÖ Configuration sauvegard√©e !", Toast.LENGTH_SHORT).show()
            }
            .setNegativeButton("‚ùå Annuler", null)
            .setNeutralButton("üîç Tester") { _, _ ->
                // Test de connexion
                lifecycleScope.launch {
                    try {
                        val testServerType = if (rbLocal.isChecked) "local" else "cloud"
                        val testUrl = if (testServerType == "local") {
                            val ip = etLocalIp.text.toString().trim()
                            if (ip.startsWith("http")) ip else "http://$ip"
                        } else {
                            etCloudUrl.text.toString().trim()
                        }
                        
                        ApiClient.updateBaseUrl(testUrl)
                        
                        // Simuler un test de connexion
                        kotlinx.coroutines.delay(1000)
                        Toast.makeText(this@MainActivity, "‚úÖ Test de connexion r√©ussi !", Toast.LENGTH_SHORT).show()
                        
                    } catch (e: Exception) {
                        Toast.makeText(this@MainActivity, "‚ùå Erreur de connexion: ${e.message}", Toast.LENGTH_LONG).show()
                    }
                }
            }
            .show()
    }

    // Variables pour g√©rer l'√©tat du service
    private var isServiceRunning = false
    
    private fun toggleService() {
        Log.d("MainActivity", "üîò Bouton service cliqu√© - √âtat actuel: $isServiceRunning")
        
        if (isServiceRunning) {
            stopSmsService()
        } else {
            startSmsService()
        }
    }
    
    private fun startSmsService() {
        Log.d("MainActivity", "üöÄ Tentative de d√©marrage du service SMS")
        
        try {
            // V√©rifier les permissions
            if (!checkPermissions()) {
                Toast.makeText(this, "‚ùå Permissions requises manquantes", Toast.LENGTH_SHORT).show()
                return
            }
            
            // V√©rifier la configuration du serveur
            val serverUrl = preferencesManager.getCurrentServerUrl()
            if (serverUrl.isEmpty()) {
                Toast.makeText(this, "‚ùå Configuration serveur manquante", Toast.LENGTH_SHORT).show()
                return
            }
            
            // V√©rifier l'ID du t√©l√©phone
            val phoneId = preferencesManager.getPhoneId()
            if (phoneId.isNullOrEmpty()) {
                Toast.makeText(this, "‚ùå T√©l√©phone non enregistr√©", Toast.LENGTH_SHORT).show()
                return
            }
            
            // D√©marrer le gestionnaire de messages am√©lior√©
            messageManager.startMessagePolling()
            isServiceRunning = true
            updateServiceStatus()
            
            Log.d("MainActivity", "‚úÖ Service SMS am√©lior√© d√©marr√© avec succ√®s")
            Toast.makeText(this, "‚úÖ Service SMS am√©lior√© d√©marr√©", Toast.LENGTH_SHORT).show()
            
            // Tester la connexion au serveur
            testServerConnection()
            
        } catch (e: Exception) {
            Log.e("MainActivity", "‚ùå Erreur lors du d√©marrage du service: ${e.message}")
            Toast.makeText(this, "‚ùå Erreur: ${e.message}", Toast.LENGTH_LONG).show()
        }
    }
    
    private fun stopSmsService() {
        Log.d("MainActivity", "üõë Arr√™t du service SMS")
        
        try {
            // Arr√™ter le gestionnaire de messages
            messageManager.stopMessagePolling()
            isServiceRunning = false
            updateServiceStatus()
            
            Log.d("MainActivity", "‚úÖ Service SMS arr√™t√©")
            Toast.makeText(this, "üõë Service SMS arr√™t√©", Toast.LENGTH_SHORT).show()
            
        } catch (e: Exception) {
            Log.e("MainActivity", "‚ùå Erreur lors de l'arr√™t du service: ${e.message}")
            Toast.makeText(this, "‚ùå Erreur: ${e.message}", Toast.LENGTH_LONG).show()
        }
    }
    
    private fun updateServiceStatus() {
        if (isServiceRunning) {
            tvServiceStatus.text = "Service: ‚úÖ Actif"
            tvServiceStatus.setTextColor(0xFF4CAF50.toInt()) // Vert
            btnToggleService.text = "üõë Arr√™ter le service"
            btnToggleService.backgroundTintList = android.content.res.ColorStateList.valueOf(0xFFf44336.toInt()) // Rouge
        } else {
            tvServiceStatus.text = "Service: ‚ùå Inactif"
            tvServiceStatus.setTextColor(0xFFf44336.toInt()) // Rouge
            btnToggleService.text = "üöÄ D√©marrer le service"
            btnToggleService.backgroundTintList = android.content.res.ColorStateList.valueOf(0xFF2196F3.toInt()) // Bleu
            tvConnectionStatus.text = "Connexion: D√©connect√©"
            tvConnectionStatus.setTextColor(0xFFf44336.toInt()) // Rouge
        }
    }
    
    private fun testServerConnection() {
        lifecycleScope.launch {
            try {
                tvConnectionStatus.text = "Connexion: üîÑ Test en cours..."
                tvConnectionStatus.setTextColor(0xFFFF9800.toInt()) // Orange
                
                // Simuler un test de connexion
                kotlinx.coroutines.delay(2000)
                
                val response = ApiClient.getApiService()?.getAllSims()
                if (response?.isSuccessful == true) {
                    tvConnectionStatus.text = "Connexion: ‚úÖ Connect√©"
                    tvConnectionStatus.setTextColor(0xFF4CAF50.toInt()) // Vert
                    Log.d("MainActivity", "‚úÖ Connexion au serveur r√©ussie")
                } else {
                    throw Exception("Erreur serveur: ${response?.code()}")
                }
                
            } catch (e: Exception) {
                tvConnectionStatus.text = "Connexion: ‚ùå Erreur"
                tvConnectionStatus.setTextColor(0xFFf44336.toInt()) // Rouge
                Log.e("MainActivity", "‚ùå Erreur de connexion: ${e.message}")
                Toast.makeText(this@MainActivity, "‚ùå Erreur de connexion: ${e.message}", Toast.LENGTH_LONG).show()
            }
        }
    }

    override fun onResume() {
        super.onResume()
        if (checkPermissions()) {
            updateServerInfo()
            updateServiceStatus()
            refreshData()
        }
    }
}



